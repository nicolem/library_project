require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/libraries/1/parent_books", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # LendableBook. As you add validations to LendableBook, be sure to
  # adjust the attributes here as well.
  let(:library){ FactoryBot.create(:library) }
  let(:valid_attributes) {
    {
      "title": "The Golden Bowl",
      "author":  "Sherlene Feil",
      "isbn": "08b552c6-72f6-40fa-85f1-9ec93002132b"
    }
  }

  let(:invalid_attributes) {
    {
      "title": nil,
      "author":  "Sherlene Feil",
      "isbn": "08b552c6-72f6-40fa-85f1-9ec93002132b"
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # LendableBooksController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new LendableBook" do
        expect {
          post library_parent_books_url(library_id: library.id),
               params: { parent_book: valid_attributes}, headers: valid_headers, as: :json
        }.to change(LendableBook, :count).by(1)
      end

      it "renders a JSON response with the new lendable_book" do
        post library_parent_books_url(library_id: library.id),
             params: { parent_book: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new LendableBook" do
        expect {
          post library_parent_books_url(library_id: library.id),
               params: { parent_book: invalid_attributes, library_id: 1 }, as: :json
        }.to change(LendableBook, :count).by(0)
      end

      it "renders a JSON response with errors for the new lendable_book" do
        post library_parent_books_url(library_id: library.id),
             params: { parent_book: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
